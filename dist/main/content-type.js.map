{"version":3,"sources":["../../src/main/content-type.ts"],"names":[],"mappings":";AAAA,2CAAyC;AAEzC;IAYI,qBAAmB,IAAY,EAAE,OAAqB,EAAE,MAAuD;QAA9E,wBAAA,EAAA,aAAqB;QAAE,uBAAA,EAAA,aAAkC,GAAG,EAAkB;QAC3G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,6BAAO,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAEM,6BAAO,GAAd,UAAe,IAAY;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,gCAAU,GAAjB;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,gCAAU,GAAjB,UAAkB,OAAe;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,8BAAQ,GAAf,UAAgB,IAAY;QACxB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAEM,8BAAQ,GAAf,UAAgB,IAAY,EAAE,KAAa;QACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,8BAAQ,GAAf;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAEa,mBAAO,GAArB,UAAsB,KAAa;QAC/B,IAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAA,8BAA6C,EAA3C,YAAI,EAAE,eAAO,CAA+B;QAClD,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,GAAG,CAAqC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK;YAC9F,IAAI,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1C,MAAM,CAAC,CAAE,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,gBAAgB,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAE,CAAC;QAC3F,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC;IAEL,kBAAC;AAAD,CA9DA,AA8DC;AA5DiB,4BAAgB,GAAG,WAAW,CAAC,OAAO,CAAC,sBAAS,CAAC,gBAAgB,CAAC,CAAC;AAEnE,kCAAsB,GAAG,WAAW,CAAC,OAAO,CAAC,sBAAS,CAAC,sBAAsB,CAAC,CAAC;AAJpF,kCAAW","file":"content-type.js","sourcesContent":["import { MediaType } from \"./media-type\";\n\nexport class ContentType {\n\n    public static APPLICATION_JSON = ContentType.valueOf(MediaType.APPLICATION_JSON);\n\n    public static APPLICATION_JSON_PATCH = ContentType.valueOf(MediaType.APPLICATION_JSON_PATCH);\n\n    protected type: string;\n\n    protected subtype: string;\n\n    protected params: Map<string, string>;\n\n    public constructor(type: string, subtype: string = \"*\", params: Map<string, string> = new Map<string, string>()) {\n        this.type = type;\n        this.subtype = subtype;\n        this.params = params;\n    }\n\n    public getType(): string {\n        return this.type;\n    }\n\n    public setType(type: string): ContentType {\n        this.type = type;\n        return this;\n    }\n\n    public getSubtype(): string {\n        return this.subtype;\n    }\n\n    public setSubtype(subtype: string): ContentType {\n        this.subtype = subtype;\n        return this;\n    }\n\n    public getParam(name: string): string {\n        return this.params.get(name);\n    }\n\n    public setParam(name: string, value: string): ContentType {\n        this.params.set(name, value);\n        return this;\n    }\n\n    public toString(): string {\n        let string = this.type + \"/\" + this.subtype;\n        if (this.params.size > 0) {\n            string += \";\" + Array.from(this.params).map(param => param.join(\"=\")).join(\";\");\n        }\n        return string;\n    }\n\n    public static valueOf(value: string): ContentType {\n        let params = value.split(\";\");\n        let [ type, subtype ] = params.shift().split(\"/\");\n        return new ContentType(type, subtype, new Map<string, string>(<[string, string][]>params.map(param => {\n            let indexOfEqualSign = param.indexOf(\"=\");\n            return [ param.substring(0, indexOfEqualSign), param.substring(indexOfEqualSign + 1) ];\n        })));\n    }\n\n}\n"]}