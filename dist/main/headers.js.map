{"version":3,"sources":["../../src/main/headers.ts"],"names":[],"mappings":";AAAA;IAII;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAA8C,CAAC;IACzE,CAAC;IAEM,qBAAG,GAAV,UAAW,IAAY;QAAE,gBAAmB;aAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;YAAnB,+BAAmB;;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAA,KAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,CAAA,CAAC,IAAI,WAAI,MAAM,EAAE;YAC5D,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,GAAG,OAAR,IAAI,GAAK,IAAI,SAAK,MAAM,GAAE;QACrC,CAAC;;IACL,CAAC;IAEM,qBAAG,GAAV,UAAW,IAAY;QAAE,gBAAmB;aAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;YAAnB,+BAAmB;;QACxC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,qBAAG,GAAV,UAAW,IAAY;QACnB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;IAC/E,CAAC;IAEM,qBAAG,GAAV,UAAW,IAAY;QACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAChD,CAAC;IAEM,0BAAQ,GAAf;QACI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAW,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAG,MAAM,CAAC,IAAI,UAAK,KAAO,EAA1B,CAA0B,CAAC,CAAC,EAAtE,CAAsE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5K,CAAC;IAEL,cAAC;AAAD,CAlCA,AAkCC,IAAA;AAlCY,0BAAO","file":"headers.js","sourcesContent":["export class Headers {\n\n    private headers: Map<string, { name: string, values: string[] }>;\n\n    public constructor() {\n        this.headers = new Map<string, { name: string, values: string[] }>();\n    }\n\n    public add(name: string, ...values: string[]): Headers {\n        if (this.has(name)) {\n            this.headers.get(name.toLowerCase()).values.push(...values);\n            return this;\n        } else {\n            return this.set(name, ...values);\n        }\n    }\n\n    public set(name: string, ...values: string[]): Headers {\n        this.headers.set(name.toLowerCase(), { name, values });\n        return this;\n    }\n\n    public get(name: string): string[] {\n        return this.has(name) ? this.headers.get(name.toLowerCase()).values : null;\n    }\n\n    public has(name: string): boolean {\n        return this.headers.has(name.toLowerCase());\n    }\n\n    public toString(): string {\n        return Array.from(this.headers.values()).reduce<string[]>((headers, header) => headers.concat(header.values.map(value => `${header.name}: ${value}`)), []).join(\"\\r\\n\");\n    }\n\n}\n"]}