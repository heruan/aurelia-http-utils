{"version":3,"sources":["../../src/main/multipart-related.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yCAAwC;AAExC,+CAA6C;AAE7C;IAAsC,oCAAS;IAc3C,0BAAmB,IAAiB,EAAE,QAAiB;QAAvD,YACI,kBAAM,QAAQ,CAAC,SAElB;QALS,WAAK,GAAsB,IAAI,GAAG,EAAgB,CAAC;QAIzD,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACrB,CAAC;IAEM,sCAAW,GAAlB,UAAmB,IAAU,EAAE,EAA6D,EAAE,IAAa;QAA5E,mBAAA,EAAA,KAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACxF,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC;IAEM,kCAAO,GAAd,UAAe,IAAU,EAAE,EAA6D;QAA7D,mBAAA,EAAA,KAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,iCAAM,GAAb;QAAA,iBAcC;QAbG,IAAI,IAAI,GAAG,IAAI,0BAAW,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9H,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,IAAI,IAAI,CACR,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,KAAI,CAAC,QAAQ,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,CAAE,CAAC,EAAtG,CAAsG,EAAE,EAAE,CAAC;YACtK,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI;YAC5B;YACC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;SACxB,CAAC,CAAC;IACP,CAAC;IACL,uBAAC;AAAD,CA9CA,AA8CC,CA9CqC,qBAAS;AAE7B,2BAAU,GAAW,YAAY,CAAC;AAFvC,4CAAgB","file":"multipart-related.js","sourcesContent":["import { Multipart } from \"./multipart\";\nimport { Part } from \"./part\";\nimport { ContentType } from \"./content-type\";\n\nexport class MultipartRelated extends Multipart {\n\n    public static CONTENT_ID: string = \"Content-ID\";\n\n    protected type: ContentType;\n\n    protected start: string;\n\n    protected startInfo: string;\n\n    protected root: Part;\n\n    protected parts: Map<string, Part> = new Map<string, Part>();\n\n    public constructor(type: ContentType, boundary?: string) {\n        super(boundary);\n        this.type = type;\n    }\n\n    public addRootPart(part: Part, id: string = part.headers.get(MultipartRelated.CONTENT_ID)[0], info?: string): MultipartRelated {\n        this.start = id;\n        this.startInfo = info;\n        return this.addPart(part, id);\n    }\n\n    public addPart(part: Part, id: string = part.headers.get(MultipartRelated.CONTENT_ID)[0]): MultipartRelated {\n        part.headers.set(MultipartRelated.CONTENT_ID, id);\n        this.parts.set(id, part);\n        return this;\n    }\n\n    public toBlob(): Blob {\n        let type = new ContentType(\"multipart\", \"related\").setParam(\"boundary\", this.boundary).setParam(\"type\", this.type.toString());\n        if (this.start) {\n            type.setParam(\"start\", this.start);\n        }\n        if (this.startInfo) {\n            type.setParam(\"start-info\", this.startInfo);\n        }\n        return new Blob([\n            ...Array.from(this.parts.values()).reduce((parts, part) => parts.concat([\"--\" + this.boundary + \"\\r\\n\", part.headers.toString(), \"\\r\\n\\r\\n\", part.body, \"\\r\\n\" ]), []),\n            \"--\" + this.boundary + \"--\"\n        ], {\n            type: type.toString()\n        });\n    }\n}\n"]}